//
// Created by JanHe on 27.07.2025.
//

#include <Arduino.h>
#include "Guardian.h"
#include <Wire.h>
#include "Adafruit_SH110X.h"
#include "HomeAssistant.h"
#include "PinOut.h"
#include "Watcher.h"
#include "esp_debug_helpers.h"

#ifdef DEBUG
#include "WebSerial.h"
#endif

// Store OLED Instance.
Adafruit_SH1107 display = Adafruit_SH1107(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1, 1000000, 100000);

// Override Header Vars.
const char* Guardian::errorTitle = "";
int Guardian::errorCode = -1;
Guardian::ErrorType Guardian::errorLevel = NORMAL;

// Bitmap generated by https://mischianti.org/images-to-byte-array-online-converter-cpp-arduino/.
// Logo by Icons8.
const unsigned char logo[512] PROGMEM = {
    // 'Bathtub, 64x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x83, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x07, 0xdf, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
    0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
    0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80,
    0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80,
    0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
    0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00,
    0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x00, 0x03, 0xf0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xe0, 0x00,
    0x00, 0x0f, 0x80, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/**
 * @brief Outputs a provided message to Serial and an OLED display.
 *
 * This function performs the following tasks:
 * - Prints the provided string to the Serial monitor for debugging.
 * - Clears the OLED display to remove any previous message.
 * - Displays the provided string on a new line in the OLED display.
 *
 * @param str The string message to be displayed and logged via Serial.
 */
void Guardian::println(const char* str)
{
    // First Print to Serial.
    Serial.println(str);

#ifdef DEBUG
    // Print to WebSerial.
    WebSerial.println(str);
#endif
    // // Clear last Message.
    // display.clearDisplay();
    //
    // // Start on 0/0.
    // display.setCursor(0, 0);
    //
    // // Write a new Line.
    // display.println(F(str));
    //
    // // Update Display Buffer.
    // display.display();
}

/**
 * @brief Sets the title of the error for display or logging purposes.
 *
 * This function assigns the provided string to the internal error title property.
 * It can be used to define a human-readable message describing the nature of an error.
 *
 * @param str The string representing the error title or message.
 */
void Guardian::error_title(const char* str)
{
    errorTitle = str;

    // Update Display and HA States.
    updateFault();
}

/**
 * @brief Sets the error level for the guardian system.
 *
 * This function updates the error severity level, which is used to indicate the type
 * of fault or issue occurring in the system. The error level can typically represent
 * different severity levels such as WARNING or CRITICAL.
 *
 * @param mode The error severity level, represented by the ErrorType enumeration.
 */
void Guardian::error_level(ErrorType mode)
{
    errorLevel = mode;

    if (errorLevel == CRITICAL)
    {
        // Set Error and Disable everything.
        Watcher::handleErrorLedFade(true);
        Watcher::setStandby(true);
    }
}

/**
 * @brief Updates the fault state in the Home Assistant system.
 *
 * Synchronizes the current error title with Home Assistant by invoking
 * the setErrorTitle function. This ensures that any changes to the
 * error state are reflected accurately in the Home Assistant interface.
 */
void Guardian::updateFault()
{
    HomeAssistant::setErrorTitle(errorTitle);
    HomeAssistant::setErrorState(getErrorType() == CRITICAL);
}

/**
 * @brief Sets an error state with a specific code, message, and severity level.
 *
 * This method updates the error code, title, and error level to represent the current
 * fault condition. It ensures that the provided information is logged and displayed
 * as necessary.
 *
 * @param i The error code indicating the specific fault.
 * @param str A descriptive string providing information about the error.
 * @param level The severity level of the error, defined by the ErrorType enum.
 */
void Guardian::setError(int i, const char* str, ErrorType level)
{
    Serial.print("Error: ");
    Serial.print(i);
    Serial.print(" - ");
    Serial.println(str);

#ifdef DEBUG
    WebSerial.print("Error: ");
    WebSerial.print(i);
    WebSerial.print(" - ");
    WebSerial.println(str);
#endif

    error_code(i);
    error_title(str);
    error_level(level);

    // Show Error Message on Display.
    clear();
    setTitle("Error");
    setValue(1, "Code", String(i).c_str());
    setValue(2, "Message", str);
    update();
}

/**
 * @brief Sets an error with a specified code and message as a warning.
 *
 * This function invokes the overloaded version of setError to set an error
 * with a specific code and message, defaulting the error type to WARNING.
 *
 * @param i The error code to be set.
 * @param str The error message to be displayed or logged.
 */
void Guardian::setError(int i, const char* str)
{
    setError(i, str, WARNING);
}

/**
 * @brief Scans for I2C devices on the bus and logs their addresses.
 *
 * This function iterates over all possible I2C addresses (1 to 126) and checks
 * for connected devices. For each detected device, it prints the address
 * in hexadecimal format to the Serial monitor. If an address reports an
 * unknown transmission error, it logs the address with an error message.
 *
 * This function uses the Wire library to communicate on the I2C bus and
 * provides useful feedback for locating and debugging connected devices.
 */
void Guardian::testScan()
{
    byte error, address;
    int nDevices = 0;

    for (address = 1; address < 127; address++)
    {
        Wire.beginTransmission(address);
        error = Wire.endTransmission();

        if (error == 0)
        {
            Serial.print("I2C device found at address 0x");
            if (address < 16)
                Serial.print("0");
            Serial.println(address, HEX);
            nDevices++;
        }
        else if (error == 4)
        {
            Serial.print("Unknown error at address 0x");
            if (address < 16)
                Serial.print("0");
            Serial.println(address, HEX);
        }
    }


    if (nDevices == 0)
        Serial.println("No I2C devices found\n");
    else
        Serial.println("Scan complete\n");
}

/**
 * @brief Registers a handler to manage shutdown events.
 *
 * This function registers a shutdown handler using the ESP-IDF API.
 * The registered handler ensures the system transitions to standby mode
 * when a shutdown event occurs. The handling logic is encapsulated through
 * a lambda function that invokes Watcher::setStandby with a value of true.
 */
void Guardian::registerShutdownHandler()
{
    esp_register_shutdown_handler([]
    {
        Watcher::setStandby(true);
    });
}

void Guardian::registerExceptionHandler()
{
}

void Guardian::showBootLogo()
{
    /**
     *     W = 128px
     * |-----------------|
     * | ### 64x64 ##### |
     * | ############### |
     * | ############### |
     * |    PVHeating    |
     * | ----------------|
     * X(1),Y(1) = 32, 32
     **/

    // Draw Bitmap at X=32, Y=32 and with/height 64px.
    display.drawBitmap(32, 32, logo, 64, 64, 1);
    display.setCursor(34, 96);
    display.print("PVHeating");
    display.display();
    sleep(2500);
}


/**
 * @brief Sets the error code for the Guardian system.
 *
 * This method assigns the specified integer value to the `errorCode` property,
 * which indicates a specific error state or code in the Guardian system.
 *
 * @param i The integer code representing an error condition.
 */
void Guardian::error_code(int i)
{
    errorCode = i;

    // Update Display and HA States.
    updateFault();
}

/**
 * @brief Initializes the Guardian system by setting up the I2C bus and configuring the display.
 *
 * This function performs the following tasks:
 * - Initializes the I2C communication using defined pins for SDA and SCL.
 * - Configures the OLED display. If the display setup fails, an error message is output via Serial.
 * - Sets the default text size and color for the display.
 * - Sends specific precharge commands to the display for configuration.
 *
 * @details The function uses Adafruit_SSD1306 library commands for display configuration
 * and assumes the hardware is connected with proper wiring configurations. It performs minimal error
 * checking for display initialization.
 */
void Guardian::setup()
{
    // Print Debug Message.
    Serial.println("Begin I2C");

    // Set up IC2 Bus.
    Wire.begin(DISPLAY_I2C_SDA, DISPLAY_I2C_SCL);


    // Register Shutdown Handler.
    registerShutdownHandler();

    // Register Exception Handler.
    registerExceptionHandler();

    // Test Scan for Devices.
    testScan();

    // Print Debug Message.
    Serial.println("I2C ready");

    // Display Setup.
    if (!display.begin(DISPLAY_ADDRESS, -1))
    {
        // Set Warning.
        setError(10, "Display Initialization Failed.");
    }
    else
    {
        Serial.println("Display ready.");

        display.clearDisplay();
        display.setRotation(3);
        display.setTextSize(1);
        display.setTextColor(SH110X_WHITE);
        display.setContrast(0.5);
        display.setCursor(0, 0);
        display.display();

        // Show boot Logo.
        showBootLogo();
    }
}

/**
 * @brief Checks if an error condition is present.
 *
 * This function determines whether the system is currently in an error state
 * by evaluating if the error code has been set to a value other than -1.
 *
 * @return true if an error exists (errorCode is not -1); false otherwise.
 */
bool Guardian::hasError()
{
    return errorCode != -1;
}

/**
 * @brief Retrieves the current error title of the Guardian class.
 *
 * This method returns the value of the static errorTitle member,
 * which represents a descriptive title of the current error, if any.
 *
 * @return The error title as a constant character pointer.
 */
const char* Guardian::getErrorTitle()
{
    return errorTitle;
}

/**
 * @brief Displays a progress bar on the OLED screen based on the given progress.
 *
 * This function draws a progress bar at a fixed position on the OLED display.
 * The progress bar's width reflects the percentage of completion specified
 * by the `progress` parameter. The progress value is clamped between 0 and 100.
 *
 * @param i A placeholder integer parameter. Currently not used in the method.
 * @param progress The percentage of progress (0 to 100) to display in the progress bar.
 */
void Guardian::setProgress(int i, unsigned int progress)
{
    // Limit Progress from 0-100;
    if (progress > 100) progress = 100;

    // Position and Size of Bar.
    const int x = 14;
    const int y = i;
    const int width = 100;
    const int height = 10;

    // Optional: delete before show progress.
    // display.fillRect(x, y, width, height, BLACK);

    // Draw Border.
    display.drawRect(x, y, width, height, SH110X_WHITE);

    // Fill Border.
    int fillWidth = (progress * (width - 2)) / 100;
    display.fillRect(x + 1, y + 1, fillWidth, height - 2, SH110X_WHITE);

    // Update Display.
    update();
}


/**
 * @brief Sets a title on the OLED display with a horizontal line underneath.
 *
 * This function configures the display by positioning the cursor to the top-left,
 * setting the font size, and printing the provided string as the title.
 * It then draws a horizontal line below the title for visual separation.
 *
 * @param str The string to be displayed as the title at the top of the OLED display.
 */
void Guardian::setTitle(const char* str)
{
    display.setCursor(0, 0);
    display.setTextSize(1.5);
    display.print(str);
    display.drawLine(0, 10, 128, 10, 1);
}

/**
 * @brief Updates the OLED display with a label and its corresponding value.
 *
 * This function writes a key-value pair to the OLED display to provide
 * dynamic information updates. The key is displayed followed by a colon,
 * and then the value, all starting at a predefined position on the display.
 *
 * @param line Reserved for specifying the line number for future implementations or enhancements. Currently unused.
 * @param key The label or identifier to display on the screen.
 * @param value The corresponding value associated with the key to show on the screen.
 */
void Guardian::setValue(int line, const char* key, const char* value)
{
    setValue(line, key, value, nullptr);
}

/**
 * @brief Displays a formatted key-value pair with an optional suffix on the OLED display.
 *
 * This method allows for the presentation of a key, value, and optional suffix in a specific
 * position on the OLED display. The text size and cursor position are set internally to adjust
 * the display line dynamically based on the line parameter.
 *
 * @param line The line number (starting from 0) where the text should be displayed on the OLED.
 * @param key The label or key that precedes the value on the display.
 * @param value The actual value to be displayed next to the key.
 * @param suffix An optional suffix to further describe the value (e.g., units like "°C" or "W").
 *               Pass nullptr if no suffix is required.
 */
void Guardian::setValue(int line, const char* key, const char* value, const char* suffix)
{
    display.setTextSize(1);
    display.setCursor(0, 13 * line);
    display.print(key);
    display.print(": ");
    display.print(value);

    if (suffix != nullptr)
    {
        display.print(" ");
        display.print(suffix);
    }
}

/**
 * @brief Updates the display by rendering its current buffer contents.
 *
 * This method triggers the Adafruit_SSD1306 display to render the content
 * that has been written to its internal buffer. It ensures that any new
 * content prepared for display is shown on the screen.
 */
void Guardian::update()
{
    display.display();
}

/**
 * @brief Initializes the booting process with a progress indicator and message.
 *
 * This function performs the following tasks:
 * - Sets the title of the display to "Booting".
 * - Displays a key-value pair on the display, indicating the beginning of the process.
 * - Updates a progress bar with the specified percentage.
 * - Refreshes the display with the latest changes.
 *
 * @param percentage An integer representing the boot progress value. Should be a number between 0 and 100.
 * @param str A descriptive message indicating the booting state.
 */
void Guardian::boot(int percentage, const char* str)
{
    display.clearDisplay();
    setTitle("Booting");
    setValue(2, "Begin", str);
    setProgress(50, percentage);
    update();
}

/**
 * @brief Clears the OLED display content.
 *
 * This function erases all content currently displayed on the OLED screen
 * by invoking the display's built-in clear functionality.
 */
void Guardian::clear()
{
    display.clearDisplay();
}

/**
 * @brief Logs a provided message to both the Serial monitor and WebSerial.
 *
 * This function sends the given string to the Serial monitor for standard logging
 * and concurrently logs the same message to the WebSerial utility.
 *
 * @param str The string message to be logged in both the Serial monitor and WebSerial.
 */
void Guardian::print(const char* str)
{
    // First Print to Serial.
    Serial.print(str);

#ifdef DEBUG
    // Print to WebSerial.
    WebSerial.print(str);
#endif
}

/**
 * @brief Clears the currently stored error state.
 *
 * This function resets the error code and error message to their default states,
 * indicating the absence of any current error. It achieves this by calling
 * the `setError` function with a predefined default error code and an empty
 * message string.
 */
void Guardian::clearError()
{
    // Print Backtrace if available.
    esp_backtrace_print(10);

    setError(-1, "", NORMAL);

    Watcher::handleErrorLedFade(false);
}

/**
 * @brief Retrieves the current error type of the Guardian system.
 *
 * This function returns the most recent error type associated with
 * the Guardian system. The error type indicates the severity level
 * of the encountered fault or status.
 *
 * @return The current error type as a value of the Guardian::ErrorType enum.
 */
Guardian::ErrorType Guardian::getErrorType()
{
    return errorLevel;
}

/**
 * @brief Checks whether the error level of the system is critical.
 *
 * This function determines if the current error status of the system
 * is at a critical level, which typically requires immediate attention.
 *
 * @return True if the error level is set to CRITICAL, otherwise false.
 */
bool Guardian::isCritical()
{
    return errorLevel == CRITICAL;
}

/**
 * @brief Retrieves the current error code of the Guardian system.
 *
 * This function provides the current error code set in the system. It can be used
 * to determine if an error condition exists and what type of error has been logged.
 *
 * @return The current error code as an integer. A negative value indicates no error,
 * while a positive value corresponds to a specific error code.
 */
int Guardian::getErrorCode()
{
    return errorCode;
}
